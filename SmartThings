/**
 *  Circulation Pump
 *
 *  Copyright 2014 mlritchie
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Circulation Pump",
    namespace: "mlritchie",
    author: "mlritchie",
    description: "When shower light is flipped turn on/off circulating pump in garage.",
    category: "My Apps",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png"
)

preferences {
  section("Turn on with which switch?") {
    input "wallSwitch", "capability.switch"
  }

  section("Turns on which outlets?") {
    input "outlets", "capability.switch", multiple: true
  }
  
  section("On Threshold (defaults to 60 min)") {
	input "onThreshold", "decimal", title: "Number of minutes", required: false
  }
}

def installed() {
  init()
}

def updated() {
  unsubscribe()
  init()
}

def init() {
  state.wallSwitch = wallSwitch.latestValue("switch")
  subscribe(wallSwitch, "switch", changeLights, [filterEvents: false])
  subscribe(outlets, "switch", changeSwitches, [filterEvents: false])
}

def changeLights(evt) {
  if(evt.isPhysical()) {
    if(evt.value == "on") {
      log.info("Turning on lights")
      outlets?.on()
      def minuteDelay = 3600
      if(onThreshold != null && onThreshold != "") {
        minuteDelay = onThreshold * 60
      }
	  runIn(minuteDelay, turnOffAll)
    }

    else if(evt.value == "off") {
      log.info("Turning off lights")
      outlets?.off()
      
      def recentStates = wallSwitch.eventsSince(new Date(now() - 4000), [all:true, max: 10]).findAll{it.name == "switch"}
	  log.debug "${recentStates?.size()} STATES FOUND, LAST AT ${recentStates ? recentStates[0].dateCreated : ''}"
      if (lastTwoStatesWere("off", recentStates, evt)) {
		log.debug "detected two taps, turn on circulation pump"
		outlets?.on()
	  }
    }
  }
  state.wallSwitch = wallSwitch.latestValue("switch")
}

def changeSwitches(evt) {
  if(evt.value == "on") {
    def minuteDelay = 5400
    if(onThreshold != null && onThreshold != "") {
      minuteDelay = onThreshold * 60 + 1800
    }
    runIn(minuteDelay, turnOffSwitches)
  }
}

def turnOffAll() {
	outlets?.off()
    wallSwitch.off()
}

def turnOffSwitches() {
	log.info("Circulation Pump left on, turning off.")
    outlets?.off()
}

private lastTwoStatesWere(value, states, evt) {
	def result = false
	if (states) {

		log.trace "unfiltered: [${states.collect{it.dateCreated + ':' + it.value}.join(', ')}]"
		def onOff = states.findAll { it.isPhysical() || !it.type }
		log.trace "filtered:   [${onOff.collect{it.dateCreated + ':' + it.value}.join(', ')}]"

		// This test was needed before the change to use Event rather than DeviceState. It should never pass now.
		if (onOff[0].date.before(evt.date)) {
			log.warn "Last state does not reflect current event, evt.date: ${evt.dateCreated}, state.date: ${onOff[0].dateCreated}"
			result = evt.value == value && onOff[0].value == value
		}
		else {
			result = onOff.size() > 1 && onOff[0].value == value && onOff[1].value == value
		}
	}
	result
}
