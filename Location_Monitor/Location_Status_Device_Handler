/**
 *  Copyright 2016 Michael Ritchie
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
	
    definition (name: "Location Status", namespace: "mlritchie", author: "Michael Ritchie") {
		capability "Switch"

		command "on"
		command "off"
		command "shutDown"
        command "setMsg"
	}

	tiles (scale: 2) {
		standardTile("switch", "device.switch", width: 2, height: 2, canChangeIcon: true, canChangeBackground: true) {
            state "off", label: 'Off', action: "", icon: "st.Home.home3", backgroundColor: "#ffffff"
			state "on", label: 'On', action: "shutDown", icon: "st.Home.home2", backgroundColor: "#79b821", nextState: "shuttingdown"
            state "shuttingdown", label: 'Shutting Down', action: "", icon: "st.Home.home3", backgroundColor: "#ffffff"
   		}
        standardTile("light", "device.light", width: 2, height: 2, decoration: "flat") {
            state "off", label: 'Off', action: "", icon: "st.Lighting.light13", backgroundColor: "#ffffff"
			state "on", label: 'On', action: "shutDown", icon: "st.Lighting.light11", backgroundColor: "#79b821"
   		}
        standardTile("lock", "device.lock", width: 2, height: 2, decoration: "flat"){
            state "locked", label:'locked', action:"lock.unlock", icon:"st.locks.lock.locked", backgroundColor:"#ffffff"
            state "unlocked", label:'unlocked', action:"lock.lock", icon:"st.locks.lock.unlocked", backgroundColor:"#79b821"
		}
        standardTile("contact", "device.contact", width: 2, height: 2, decoration: "flat") {
			state("closed", label:'Closed', icon:"st.contact.contact.closed", backgroundColor:"#ffffff", action: "")
			state("open", label:'Open', icon:"st.contact.contact.open", backgroundColor:"#79b821", action: "")
		}
        standardTile("alarm", "device.alarm", width: 2, height: 2, decoration: "flat") {
            state "disarmed", label:"Disarmed", action:"", icon:"st.Home.home3", backgroundColor:"#79b821"
            state "armedAway", label:"Armed Away", action:"", icon:"st.Home.home3", backgroundColor:"#ffffff"
            state "armedStay", label:"Armed Stay", action:"", icon:"st.Home.home3", backgroundColor:"#ffffff"
		}
        standardTile("toggle", "device.switch", width: 2, height: 2, decoration: "flat") {
            state "off", label: "", action: "", icon:""
            state "on", label:"Shut Down", action: "shutDown", icon:"st.Home.home30", nextState: "shuttingdown"
            state "shuttingdown", label: 'Shutting Down', action: "off", icon: "st.Home.home30"
  		}
        standardTile("blank", "device.switch", width: 2, height: 2, decoration: "flat") {
  		}
        valueTile("onMsg", "device.onMsg", width: 6, height:2, inactiveLabel: false, decoration: "flat") {
			state "default", label:'${currentValue}'
		}
        valueTile("lockMsg", "device.lockMsg", width: 6, height:2, inactiveLabel: false, decoration: "flat") {
			state "default", label:'${currentValue}'
		}
        valueTile("doorMsg", "device.doorMsg", width: 6, height:2, inactiveLabel: false, decoration: "flat") {
			state "default", label:'${currentValue}'
		}
        valueTile("alarmMsg", "device.alarmMsg", width: 6, height:2, inactiveLabel: false, decoration: "flat") {
			state "default", label:'${currentValue}'
		}
        main "switch"
		details(["switch","light","lock","contact","alarm","toggle","onMsg","lockMsg","doorMsg","alarmMsg"])
	}
}

def parse(String description) {
	def pair = description.split(":")
	createEvent(name: pair[0].trim(), value: pair[1].trim())
}

def on() {
	sendEvent(name: "switch", value: "on")
}

def off() {
	sendEvent(name: "switch", value: "off")
}

def shutDown() {
    sendEvent(name: "switch", value: "shuttingdown")
}

def setMsg(attribute, msg) {
	if (device.currentValue(attribute) != msg) {
    	sendEvent(name: attribute, value: msg)
    }
}
