/**
 *  arduinoTempSensor
 *
 *  Copyright 2015 Michael Ritchie
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
    definition (name: "arduinoTempSensor", namespace: "mlritchie", author: "Michael Ritchie") {
		capability "Sensor"
		capability "Temperature Measurement"
        
        attribute "fridgeTemp", "string"
		attribute "freezerTemp", "string"
	}

	simulator {
	}

	tiles {
		valueTile("fridgeTemp", "device.fridgeTemp", width: 1, height: 1, inactiveLabel: false) {
        	state("temperature", label: 'Fridge\n${currentValue}°F', unit:"F", 
            	backgroundColors: [
            	    [value: 31, color: "#153591"],
                	[value: 44, color: "#1e9cbb"],
                	[value: 59, color: "#90d2a7"],
                	[value: 74, color: "#44b621"],
                	[value: 84, color: "#f1d801"],
                	[value: 95, color: "#d04e00"],
                	[value: 96, color: "#bc2323"]
            	]
        	)
    	}
        
        valueTile("freezerTemp", "device.freezerTemp", width: 1, height: 1, inactiveLabel: false) {
        	state("temperature", label: 'Freezer\n${currentValue}°F', unit:"F", 
            	backgroundColors: [
                	[value: 31, color: "#153591"],
                	[value: 44, color: "#1e9cbb"],
                	[value: 59, color: "#90d2a7"],
                	[value: 74, color: "#44b621"],
                	[value: 84, color: "#f1d801"],
                	[value: 95, color: "#d04e00"],
                	[value: 96, color: "#bc2323"]
            	]
        	)
    	}

        main (["fridgeTemp", "freezerTemp"])
        details(["fridgeTemp", "freezerTemp", "configure"])
	}
}

// parse events into attributes
def parse(String description) {
    def msg = zigbee.parse(description)?.text

    def parts = msg.split(" ")
    def name  = parts.length>0?parts[0].trim():null    
    //def value = parts.length>1?parts[1].trim():null
    def value = parts.length>1?zigbee.parseHATemperatureValue(parts[1].trim(), "", getTemperatureScale()):null
    def unit = getTemperatureScale()

    name = value != "ping" ? name : null
    def result = createEvent(name: name, value: value, unit: unit)
    log.debug result
    return result
}
