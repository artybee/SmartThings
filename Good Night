/**
 *  Good Night
 *
 *  Copyright 2014 mlritchie
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Good Night",
    namespace: "mlritchie",
    author: "mlritchie",
    description: "This will turn off all lights, lock door, close garage (if open), and turn on master fan when a switch is double tapped.",
    category: "Convenience",
    iconUrl: "https://s3.amazonaws.com/smartthings-device-icons/custom/wuk/nt_sunny.png",
    iconX2Url: "https://s3.amazonaws.com/smartthings-device-icons/custom/wuk/nt_sunny@2x.png")


preferences {
	section("When this switch is double-tapped...") {
		input "master", "capability.switch", title: "Where?"
	}
    section("Or button 4 on these Minimotes are pushed...") {
		input "buttonDevice", "capability.button", multiple: true
	}
	section("Turn off all of these switches") {
		input "switches", "capability.switch", multiple: true, required: false
	}
	section("And lock this door") {
		input "lock1", "capability.lock", multiple: false, required: false
	}
	section("And close this door") {
		input "door1", "capability.switch", title: "Which Switch?", required: false
        input "multisensor1", "capability.threeAxis", title: "Which Sensor?", required: false
	}
    section("And turn on this fan") {
		input "fan1", "capability.switch", multiple: false, required: false
	}
}

def installed()
{
	subscribe(master, "switch", switchHandler, [filterEvents: false])
    subscribe(buttonDevice, "button", buttonEvent)
    subscribe(app, appTouch)
}

def updated()
{
	unsubscribe()
	subscribe(master, "switch", switchHandler, [filterEvents: false])
    subscribe(buttonDevice, "button", buttonEvent)
    subscribe(app, appTouch)
}

def switchHandler(evt) {
	log.info evt.value

	// use Event rather than DeviceState because we may be changing DeviceState to only store changed values
	def recentStates = master.eventsSince(new Date(now() - 4000), [all:true, max: 10]).findAll{it.name == "switch"}
	log.debug "${recentStates?.size()} STATES FOUND, LAST AT ${recentStates ? recentStates[0].dateCreated : ''}"

	if (evt.isPhysical()) {
		if (evt.value == "off" && lastTwoStatesWere("off", recentStates, evt)) {
			log.debug "detected two taps, turn off other light(s)"
            shutDownHouse()
		}
	}
	else {
		log.trace "Skipping digital on/off event"
	}
}

def appTouch(evt) {
	log.debug "appTouch: $evt"
	shutDownHouse()
}

def buttonEvent(evt){
	def buttonNumber = evt.data
	def value = evt.value
	//log.debug "buttonEvent: $evt.name = $evt.value ($evt.data)"
	log.debug "button: $buttonNumber, value: $value"
	
    def recentEvents = buttonDevice.eventsSince(new Date(now() - 3000)).findAll{it.value == evt.value && it.data == evt.data}
	//log.debug "Found ${recentEvents.size()?:0} events in past 3 seconds"
	
	if(recentEvents.size <= 1 && buttonNumber == '{"buttonNumber":4}'){
		shutDownHouse()
    }
}

private lastTwoStatesWere(value, states, evt) {
	def result = false
	if (states) {

		log.trace "unfiltered: [${states.collect{it.dateCreated + ':' + it.value}.join(', ')}]"
		def onOff = states.findAll { it.isPhysical() || !it.type }
		log.trace "filtered:   [${onOff.collect{it.dateCreated + ':' + it.value}.join(', ')}]"

		// This test was needed before the change to use Event rather than DeviceState. It should never pass now.
		if (onOff[0].date.before(evt.date)) {
			log.warn "Last state does not reflect current event, evt.date: ${evt.dateCreated}, state.date: ${onOff[0].dateCreated}"
			result = evt.value == value && onOff[0].value == value
		}
		else {
			result = onOff.size() > 1 && onOff[0].value == value && onOff[1].value == value
		}
	}
	result
}

private shutDownHouse() {
	switches.off()
	checkLock()
	checkDoor()
    fan1.on()
    fan1.setLevel(62)
}

private checkLock() {   
	def anyLocked = lock1.currentValue("lock") == 'locked'
	if (!anyLocked) {
		lock1.lock()
	} else {
		log.debug "Door already locked."
	}
}

private checkDoor() {
    def isOpen = multisensor1.latestValue("status") == "open"
	if (isOpen) {
		door1.on()
	} else {
		log.debug "Door already closed."
	}
}

